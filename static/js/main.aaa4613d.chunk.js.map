{"version":3,"sources":["components/TaskBanner.js","components/TaskRow.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TaskBanner","props","className","taskItems","filter","t","done","length","TaskRow","id","key","task","name","type","checked","onChange","toggleTask","onClick","deleteTask","TaskCreator","useState","newTaskName","setNewTaskName","maxlength","value","e","target","placeholder","callback","VisibilityControl","isChecked","htmlFor","description","App","setTaskItems","showCompleted","setshowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","removeIndex","indexOf","filteredItems","slice","concat","taskName","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aaa4613d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TaskBanner = props => (\n  <h4 className='bg-primary text-white text-center p-4 titleBanner'>\n    Aplicación de tareas ({props.taskItems.filter(t => !t.done).length} tarea/s\n    a realizar)\n  </h4>\n);\n","import React from 'react';\n\nexport const TaskRow = props => (\n  <tr id='task-description' key={props.task.name}>\n    <td>{props.task.name}</td>\n    <td>\n      <input\n        type='checkbox'\n        checked={props.task.done}\n        onChange={() => props.toggleTask(props.task)}\n      />\n    </td>\n    <td>\n      <button\n        className='btn btn-danger'\n        onClick={() => props.deleteTask(props.task)}\n      >\n        Eliminar\n      </button>\n    </td>\n  </tr>\n);\n","import React, {useState} from 'react';\n\nexport const TaskCreator = props => {\n  const [newTaskName, setNewTaskName] = useState('');\n\n  const updateNewTaskValue = e => setNewTaskName(e.target.value);\n\n  const createNewTask = () => {\n    props.callback(newTaskName);\n    setNewTaskName('');\n  };\n\n  return (\n    <div className='my-1'>\n      <input\n        type='text'\n        className='form-control'\n        maxlength='20'\n        value={newTaskName}\n        onChange={updateNewTaskValue}\n        placeholder='Escribe aquí una nueva tarea'\n      />\n      <button className='btn btn-success mt-1' onClick={createNewTask}>\n        Agregar tarea\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const VisibilityControl = props => {\n  return (\n    <div className='form-check'>\n      <input\n        type='checkbox'\n        className='form-check-input'\n        checked={props.isChecked}\n        onChange={e => props.callback(e.target.checked)}\n      />\n      <label htmlFor='form-check-label'>Ver {props.description}</label>\n    </div>\n  );\n};\n","import React, {useState, useEffect} from 'react';\nimport {TaskBanner} from './components/TaskBanner';\nimport {TaskRow} from './components/TaskRow';\nimport {TaskCreator} from './components/TaskCreator';\nimport {VisibilityControl} from './components/VisibilityControl';\nimport './App.css';\n\nfunction App() {\n  const [taskItems, setTaskItems] = useState([]);\n\n  const [showCompleted, setshowCompleted] = useState(true);\n\n  useEffect(() => {\n    let data = localStorage.getItem('tasks');\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([]);\n      setshowCompleted(true);\n    }\n  }, []);\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, {name: taskName, done: false}]);\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const toggleTask = task =>\n    setTaskItems(\n      taskItems.map(t => (t.name === task.name ? {...t, done: !t.done} : t))\n    );\n\n  const taskTableRows = doneValue =>\n    taskItems\n      .filter(task => task.done === doneValue)\n      .map(task => (\n        <TaskRow\n          key={task.name}\n          task={task}\n          toggleTask={toggleTask}\n          deleteTask={deleteTask}\n        />\n      ));\n\n  const deleteTask = task => {\n    let removeIndex = taskItems\n      .map(function (task) {\n        return task.name;\n      })\n      .indexOf(task.name);\n\n    let filteredItems = taskItems\n      .slice(0, removeIndex)\n      .concat(taskItems.slice(removeIndex + 1, taskItems.length));\n    setTaskItems(filteredItems);\n  };\n  return (\n    <div>\n      <TaskBanner taskItems={taskItems} />\n      <div className='container-fluid'>\n        <TaskCreator callback={createNewTask} />\n        <table className='table table-striped table-bordered'>\n          <thead>\n            <tr>\n              <th>Descripción</th>\n              <th>Realizada</th>\n            </tr>\n          </thead>\n          <tbody>{taskTableRows(false)}</tbody>\n        </table>\n        <div className='bg-secondary text-white text-center p-2'>\n          <VisibilityControl\n            description='tareas realizadas'\n            isChecked={showCompleted}\n            callback={checked => setshowCompleted(checked)}\n          />\n        </div>\n        {showCompleted && (\n          <table className='table table-striped table-bordered'>\n            <thead>\n              <tr>\n                <th>Descripción</th>\n                <th>Realizada</th>\n              </tr>\n            </thead>\n            <tbody>{taskTableRows(true)}</tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}