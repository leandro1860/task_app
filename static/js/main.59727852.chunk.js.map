{"version":3,"sources":["components/TaskBanner.js","components/TaskRow.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TaskBanner","PropTypes","className","taskItems","filter","t","done","length","TaskRow","key","task","name","type","checked","onChange","toggleTask","onClick","deleteTask","TaskCreator","useState","newTaskName","setNewTaskName","value","e","target","placeholder","callback","VisibilityControl","isChecked","htmlFor","description","App","setTaskItems","showCompleted","setshowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","removeIndex","indexOf","filteredItems","slice","concat","taskName","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59727852.chunk.js","sourcesContent":["import React from 'react'\n\nexport const TaskBanner = PropTypes => (\n  <h4 className=\"bg-primary text-white text-center p-4 titleBanner\">\n    Aplicación de tareas ({PropTypes.taskItems.filter(t => !t.done).length}{' '}\n    tarea/s a realizar)\n  </h4>\n)\n","import React from 'react'\n\nexport const TaskRow = PropTypes => (\n  <tr key={PropTypes.task.name}>\n    <td>{PropTypes.task.name}</td>\n    <td>\n      <input\n        type=\"checkbox\"\n        checked={PropTypes.task.done}\n        onChange={() => PropTypes.toggleTask(PropTypes.task)}\n      />\n    </td>\n    <td>\n      <button\n        className=\"btn btn-danger\"\n        onClick={() => PropTypes.deleteTask(PropTypes.task)}\n      >\n        Eliminar\n      </button>\n    </td>\n  </tr>\n)\n","import React, { useState } from 'react'\n\nexport const TaskCreator = PropTypes => {\n  const [newTaskName, setNewTaskName] = useState('')\n\n  const updateNewTaskValue = e => setNewTaskName(e.target.value)\n\n  const createNewTask = () => {\n    PropTypes.callback(newTaskName)\n    setNewTaskName('')\n  }\n\n  return (\n    <div className=\"my-1\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={newTaskName}\n        onChange={updateNewTaskValue}\n        placeholder=\"Escribe aquí una nueva tarea\"\n      />\n      <button className=\"btn btn-success mt-1\" onClick={createNewTask}>\n        Agregar tarea\n      </button>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const VisibilityControl = PropTypes => {\n  return (\n    <div className=\"form-check\">\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        checked={PropTypes.isChecked}\n        onChange={e => PropTypes.callback(e.target.checked)}\n      />\n      <label htmlFor=\"form-check-label\">Ver {PropTypes.description}</label>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { TaskBanner } from './components/TaskBanner'\nimport { TaskRow } from './components/TaskRow'\nimport { TaskCreator } from './components/TaskCreator'\nimport { VisibilityControl } from './components/VisibilityControl'\nimport './App.css'\n\nfunction App() {\n  const [taskItems, setTaskItems] = useState([\n    { name: 'Tarea 1', done: false },\n    { name: 'Tarea 2', done: false },\n    { name: 'Tarea 3', done: true },\n    { name: 'Tarea 4', done: false }\n  ])\n\n  const [showCompleted, setshowCompleted] = useState(true)\n\n  useEffect(() => {\n    let data = localStorage.getItem('tasks')\n    if (data != null) {\n      setTaskItems(JSON.parse(data))\n    } else {\n      setTaskItems([\n        { name: 'Tarea 1', done: false },\n        { name: 'Tarea 2', done: false },\n        { name: 'Tarea 3', done: true },\n        { name: 'Tarea 4', done: false }\n      ])\n      setshowCompleted(true)\n    }\n  }, [])\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, { name: taskName, done: false }])\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems))\n  }, [taskItems])\n\n  const toggleTask = task =>\n    setTaskItems(\n      taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t))\n    )\n\n  const taskTableRows = doneValue =>\n    taskItems\n      .filter(task => task.done === doneValue)\n      .map(task => (\n        <TaskRow\n          key={task.name}\n          task={task}\n          toggleTask={toggleTask}\n          deleteTask={deleteTask}\n        />\n      ))\n\n  const deleteTask = task => {\n    let removeIndex = taskItems\n      .map(function(task) {\n        return task.name\n      })\n      .indexOf(task.name)\n\n    let filteredItems = taskItems\n      .slice(0, removeIndex)\n      .concat(taskItems.slice(removeIndex + 1, taskItems.length))\n    setTaskItems(filteredItems)\n  }\n  return (\n    <div>\n      <TaskBanner taskItems={taskItems} />\n      <div className=\"container-fluid\">\n        <TaskCreator callback={createNewTask} />\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr>\n              <th>Descripción</th>\n              <th>Realizada</th>\n            </tr>\n          </thead>\n          <tbody>{taskTableRows(false)}</tbody>\n        </table>\n        <div className=\"bg-secondary text-white text-center p-2\">\n          <VisibilityControl\n            description=\"tareas realizadas\"\n            isChecked={showCompleted}\n            callback={checked => setshowCompleted(checked)}\n          />\n        </div>\n        {showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Descripción</th>\n                <th>Realizada</th>\n              </tr>\n            </thead>\n            <tbody>{taskTableRows(true)}</tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}